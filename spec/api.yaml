# Akasha Gateway - API for legacy (web 2.0) applications
# Copyright (c) 2018 Péter Szilágyi. All rights reserved.
#
# The Akasha gateway is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# The Akasha gateway is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with the Akasha gateway. If not, see <http://www.gnu.org/licenses/>.

swagger: "2.0"

info:
  title: Akasha Gateway
  version: beta
  contact:
    name: Péter Szilágyi
    email: Péter Szilágyi <peterke@gmail.com>
    url: https://github.com/karalabe/akasha-gateway
  license:
    name: LGPL-3.0
    url: https://www.gnu.org/licenses/lgpl-3.0.txt
  description: |
    Restful HTTP API for the Akasha decentralized social network. [Fork me!](https://github.com/karalabe/akasha-gateway)

    It is important to be aware that all information returned by the Akasha API is gathered from decentralized networks (Ethereum and IPFS). This has important consequences callers need to be aware of:
      * Returned information is only as recent as the latest Ethereum block processed by the API server. To avoid callers acting on potentially stale data, the API server will always return a timestamp for every request, corresponding to the latest Ethereum block's timestamp.
      * Data content might occasionally be unavailable if the hosting IPFS nodes are offline. To ensure callers are aware that some data is unreachable at endpoint invocation time, the API server will explicitly return `null` for such fields.
schemes:
  - http
host: "{{.Host}}"
basePath: "{{.Base}}"

tags:
  - name: User
    description: User methods provide access to information and operations relating to registered Akasha users.
  - name: Entry
    description: Entry methods provide access to information and operations relating to Akasha content entries.
  - name: Comment
    description: Comment methods provide access to information and operations relating to Akasha entry comments.

paths:
  /users/{id}:
    get:
      tags:
        - User
      summary: Fetch user's profile
      description: This endpoint can be used to retrieve all the available profile information about an Akasha user.
      parameters:
        - name: id
          in: path
          required: true
          description: Akasha user or Ethereum address
          type: string
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for profile retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/User"
        404:
          description: Non-registered user
        429:
          description: API quota exceeded

  /users/{id}/entries:
    get:
      tags:
        - User
        - Entry
      summary: Fetch user's entry list
      description: This endpoint can be used to retrieve the unique identifier of all the posts made by an Akasha user.
      parameters:
        - name: id
          in: path
          required: true
          description: Akasha user or Ethereum address
          type: string
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Entries"
        404:
          description: Non-registered user or non-existent post
        429:
          description: API quota exceeded

  /users/{userId}/entries/{entryId}:
    get:
      tags:
        - User
        - Entry
      summary: Fetch user's entry
      description: This endpoint can be used to retrieve all the available information about an Akasha post made by a particular user.
      parameters:
        - name: userId
          in: path
          required: true
          description: Akasha user or Ethereum address
          type: string
        - name: entryId
          in: path
          required: true
          description: Unique Akasha entry ID
          type: string
          format: hex hash
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for content retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Entry"
        404:
          description: Non-registered user or non-existent post
        429:
          description: API quota exceeded

  /users/{id}/entries/{entryId}/comments:
    get:
      tags:
        - Entry
        - Comment
      summary: Fetch entry's comment list
      description: This endpoint can be used to retrieve the unique identifier of all the comments made on an Akasha entry of a particular user.
      parameters:
        - name: userId
          in: path
          required: true
          description: Akasha user or Ethereum address
          type: string
        - name: entryId
          in: path
          required: true
          description: Unique Akasha entry ID
          type: string
          format: hex hash
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for content retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Comments"
        404:
          description: Non-registered user or non-existent post
        429:
          description: API quota exceeded

  /users/{userId}/entries/{entryId}/comments/{commentId}:
    get:
      tags:
        - Entry
        - Comment
      summary: Fetch entry's comment
      description: This endpoint can be used to retrieve all the available information about an Akasha comment.
      parameters:
        - name: userId
          in: path
          required: true
          description: Akasha user or Ethereum address
          type: string
        - name: entryId
          in: path
          required: true
          description: Unique Akasha entry ID
          type: string
          format: hex hash
        - name: commentId
          in: path
          required: true
          description: Unique Akasha comment ID
          type: string
          format: hex hash
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for content retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Comment"
        404:
          description: Non-registered user, non-existent post or non-existent comment
        429:
          description: API quota exceeded

  /users/{id}/comments:
    get:
      tags:
        - User
        - Comment
      summary: Fetch user's comment list
      description: This endpoint can be used to retrieve the unique identifier of all the comments made by a particular user.
      parameters:
        - name: userId
          in: path
          required: true
          description: Akasha user or Ethereum address
          type: string
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for content retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Comments"
        404:
          description: Non-registered user
        429:
          description: API quota exceeded

  /users/{userId}/comments/{commentId}:
    get:
      tags:
        - User
        - Comment
      summary: Fetch user's comment
      description: This endpoint can be used to retrieve all the available information about an Akasha comment.
      parameters:
        - name: userId
          in: path
          required: true
          description: Akasha user or Ethereum address
          type: string
        - name: commentId
          in: path
          required: true
          description: Unique Akasha comment ID
          type: string
          format: hex hash
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for content retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Comment"
        404:
          description: Non-registered user or non-existent comment
        429:
          description: API quota exceeded

  /entries/{id}:
    get:
      tags:
        - Entry
      summary: Find entry
      description: This endpoint can be used to retrieve all the available information about an Akasha post made by an unknown user.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique Akasha entry ID
          type: string
          format: hex hash
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for content retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Entry"
        404:
          description: Non-existent post
        429:
          description: API quota exceeded

  /entries/{entryId}/comments:
    get:
      tags:
        - Entry
        - Comment
      summary: Find entry's comment list
      description: This endpoint can be used to retrieve the unique identifier of all the comments made on an Akasha entry of an unknown user.
      parameters:
        - name: entryId
          in: path
          required: true
          description: Unique Akasha entry ID
          type: string
          format: hex hash
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for content retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Comments"
        404:
          description: Non-existent post
        429:
          description: API quota exceeded

  /entries/{entryId}/comments/{commentId}:
    get:
      tags:
        - Entry
        - Comment
      summary: Find entry's comment
      description: This endpoint can be used to retrieve all the available information about an Akasha comment.
      parameters:
        - name: entryId
          in: path
          required: true
          description: Unique Akasha entry ID
          type: string
          format: hex hash
        - name: commentId
          in: path
          required: true
          description: Unique Akasha comment ID
          type: string
          format: hex hash
        - name: timeout
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 60
          description: Allowance for content retrival from IPFS
      responses:
        200:
          description: Successful retrieval
          schema:
            $ref: "#/definitions/Comment"
        404:
          description: Non-existent post or non-existent comment
        429:
          description: API quota exceeded

definitions:
  User:
    description: Profile and balance infos of an Akasha user
    properties:
      user:
        type: string
        description: Unique user label within Akasha
      name:
        type: string
        description: First and last name concatenated
      address:
        type: string
        format: hex address
        description: Ethereum address owning this profile
      about:
        type: string
        description: Short biography provided by the user
      avatar:
        type: string
        format: url
        description: Profile picture through the IPFS gateway
      cover:
        type: string
        format: url
        description: Cover photo through the IPFS gateway
      links:
        type: array
        items:
          type: string
          format: url
        description: Collection of links provided by the user
      tips:
        type: boolean
        description: Whether the user accepts Ether tips
      aether:
        type: string
        format: hex bigint, 18 decimals
        description: Aether balance free to interact with
      bonded:
        type: string
        format: hex bigint, 18 decimals
        description: Aether locked up for Mana
      cycling:
        type: string
        format: hex bigint, 18 decimals
        description: Mana converting back into Aether
      mana:
        type: string
        format: hex bigint, 18 decimals
        description: Daily Mana allowance for interactions
      spent:
        type: string
        format: hex bigint, 18 decimals
        description: Already expended Mana in the last day
      essence:
        type: string
        format: hex bigint, 18 decimals
        description: Essence balance convertible to Aether
      karma:
        type: string
        format: hex bigint, 18 decimals
        description: Karma points for user reputation
      entries:
        type: int
        description: Number of possts the user made
    example:
      user: "karalabe"
      name: "Péter Szilágyi"
      address: "0xd9c9cd5f6779558b6e0ed4e6acf6b1947e7fa1f3"
      about: "I like ducks ;)"
      avatar: "https://ipfs.io/ipfs/QmTTd6yzPo3uVZSZPvkvRUyNrCuEpzjn5FMmQPEVd6ftHP"
      cover: "https://ipfs.io/ipfs/QmUE6hhwqTc9ZdEtoWV8syTAcKsNT9QdD8QtFp3RWHQ2T8"
      links: [
        "https://twitter.com/peter_szilagyi",
        "https://github.com/karalabe",
      ]
      tips: true
      aether: "0x643a7cd89c7ce38e3"
      bonded: "0x3635c9adc5dea00000"
      cycling: "0x0"
      mana: "0x3635c9adc5dea00000"
      spent: "0x542253a126ce40000"
      essence: "0x138400eca364a00000"
      karma: "0x4be4e7267b6ae00000"
      entries: 7

  Entries:
    description: List of unique identifiers of posts made by a user.
    type: array
    items:
      type: string
      format: hex hash
    example: [
      "0xed951ca616c92d7f31c0d60a92d1391699d918b8457fb128864d4350fe970c0f",
      "0x2ac945f841635a24efbaaf6c59cc09f40e2e5e882131a25e0d98704467587a60",
      "0x17d273662f3250f050351089c87df7423331f4b526bd9babbadc02453e563495",
      "0xd537a1e2d0f22bb5751ae66e5ae6f556b36f696bcad22e303fbf1802b6dbfb02",
      "0x3c38496f4cfa396b536a4b81ebacf9f92f0a0ec494b782ad4717f6186e57b467",
      "0x50bd1828bc029ac736a5dbb4646a45d174a9aa88de87708a0992e9726a165510",
      "0x562a366d4b2105aa6ff7b1a06f86bae4178ebae79878d8c5681242c1e2a3f022",
      "0x4ac6aba5db021f19432f55133c1fe9ca19b3a01fccf10873e3d709b4d06da3d5"
    ]

  Entry:
    description: Metadata and content of an Akasha post
    properties:
      id:
        type: string
        format: hex hash
        description: Unique entry ID within Akasha
      title:
        type: string
        description: Post title given by the author
      author:
        type: string
        format: hex address
        description: Ethereum address of the author
      published:
        type: string
        format: time
        description: Publishing time of the entry
      tags:
        type: array
        items:
          type: string
        description: Search tags given by the author
      version:
        type: int
        description: Number of times the entry was edited
      comments:
        type: int
        description: Number of comments posted on the entry
      content:
        type: array
        items:
          type: object
          properties:
            caption:
              type: string
              description: Caption under a media object (excludes text)
            image:
              type: string
              format: url
              description: Image through the IPFS gateway (excludes text)
            text:
              type: string
              description: Textual paragraph (excludes caption/image)
        description: Entry contents per post paragraph
    example:
      id: "0x3c38496f4cfa396b536a4b81ebacf9f92f0a0ec494b782ad4717f6186e57b467"
      title: "Akasha ProTip: AETH for existing Rinkeby users"
      author: "0xd9c9cd5f6779558b6e0ed4e6acf6b1947e7fa1f3"
      published: "2017-12-28T15:57:01+02:00"
      tags: [
        "akasha",
        "aeth",
        "testnet"
      ]
      version: 1
      comments: 1
      content: [
        {
          text: "If you have an existing Ethereum account on the Rinkeby testnet and log in to Akasha using it, you won't get onboarded, and as such, won't get any AETH to interact with Akasha."
        },
        {
          text: "A simple hack to keep your user but still get some test AETH is to (1) log out; (2) create a new Akasha account; (3) transfer all the onboarded AETH from the new account to your old one (maybe even get the ETH grant); (4) delete the temporary account from your keystore."
        },
        {
          image: "https://ipfs.io/ipfs/QmcMtstnb8KYquqoQu6mjAa2u8s7f2kkLPrQBVLNSq2Ypn",
          caption: "Hackerman"
        }
      ]

  Comments:
    description: List of unique identifiers of comments made under a post.
    type: array
    items:
      type: string
      format: hex hash
    example: [
      "0x1024010f62fd7475d1298a8ec7d7dce4cb541c302c166be859ecfefce72f44be",
      "0x5447cc6e30bddb601a17022075f22a251ac77c6c73180d1ee4fb17b99f4f0ccc",
      "0x0f221863195c169521547d5cca9fd72f3286a326ace0f48023942e84b18ef281",
      "0x85f20d8424565099735f1ec0828d3d8513780063d7f797c775c3d3319476e906"
    ]

  Comment:
    description: Metadata and content of an Akasha comment
    properties:
      id:
        type: string
        format: hex hash
        description: Unique comment ID within Akasha
      author:
        type: string
        format: hex address
        description: Ethereum address of the author
      entry:
        type: string
        format: hex hash
        description: Unique ID of the entry being commented
      published:
        type: string
        format: time
        description: Publishing time of the entry
      content:
        type: array
        items:
          type: object
          properties:
            caption:
              type: string
              description: Caption under a media object (excludes text)
            image:
              type: string
              format: url
              description: Image through the IPFS gateway (excludes text)
            text:
              type: string
              description: Textual paragraph (excludes caption/image)
        description: Entry contents per post paragraph
    example:
      id: "0xe5ccd86a35be8eb27264cc796a037b99d261324ba7be0c5e825c90b44affd7b2"
      author: "0xd9c9cd5f6779558b6e0ed4e6acf6b1947e7fa1f3"
      entry: "0x4b6c351ce166f621f7684795ca7da6acac0dbd3cd86c06add0f888a04671bf7e"
      published: "2018-01-21T18:07:27+02:00"
      content: [
        {
          text: "This is a funky comment with various text and [links](https://github.com) and whatnot"
        },
        {
          image: "https://ipfs.io/ipfs/Qma4jTES9AH2Gqso1FNPzzLDx9nMp689DgxYNB5AJjoJMF"
        },
        {
          text: "with the aim of testing this box and"
        },
        {
          text: "whatever"
        },
        {
          text: "it"
        },
        {
          text: "generates"
        }
      ]
